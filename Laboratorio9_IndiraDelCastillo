-------------------------PARTE 1--------------------------------------------------------
TRANSCRIPCION DE LOS DATOS ORIGINALES PARA CREAR DATAFRAME
import pandas as pd

#Datos originales
data= {  
  "Nombre": ["Juan", "Ana", "Pedro", "Maria", "Luis", "Ana"],
  "Edad": [28, 34, None, 45, 38,34],
  "Salario": ["3000", "4000", "cinco mil", "4500", "4000", "5000"],
  "FechaIngreso": ["2021-01-15", "2020/03/12", "2022-07-01", "2021/12/01", "2021-05-20", "2020-03-12"]
}

df = pd.DataFrame(data)
print(df)

ASEGURAMIENTO DE LA CALIDAD DE DATOS

import pandas as pd
import numpy as np

# Datos originales
data = {  
  "Nombre": ["Juan", "Ana", "Pedro", "Maria", "Luis", "Ana"],
  "Edad": [28, 34, None, 45, 38, 34],
  "Salario": ["3000", "4000", "cinco mil", "4500", "4000", "5000"],
  "FechaIngreso": ["2021-01-15", "2020/03/12", "2022-07-01", "2021/12/01", "2021-05-20", "2020-03-12"]
}

df = pd.DataFrame(data)

# 1. Identificar y contar los valores faltantes en cada columna
valores_faltantes = df.isnull().sum()
print("Valores faltantes por columna:\n", valores_faltantes)

# 2. Verificar el formato de la columna 'Salario' para asegurar que todos los valores sean numéricos
# Crear una nueva columna que indique si el valor es numérico
df['Salario_Num'] = pd.to_numeric(df['Salario'], errors='coerce')
valores_no_numericos = df[df['Salario_Num'].isnull()]
print("\nValores no numéricos en la columna 'Salario':\n", valores_no_numericos)

# 3. Validar y estandarizar el formato de la columna 'Fecha Ingreso' a YYYY-MM-DD
df['FechaIngreso_Estandar'] = pd.to_datetime(df['FechaIngreso'], errors='coerce')
errores_fecha = df[df['FechaIngreso_Estandar'].isnull()]
print("\nErrores en la columna 'Fecha Ingreso':\n", errores_fecha)

# Mostrar el DataFrame con las columnas actualizadas
print("\nDataFrame actualizado:\n", df)

--------------------------EJERCICIO 2----
#identificar valores faltante

import pandas as pd
import numpy as np

# Crear el DataFrame con los datos proporcionados
data = {
    "Nombre": ["Juan", "Ana", "Pedro", "María", "Luis", "Carla"],
    "Edad": [28, None, 40, 45, 38, 34],
    "Salario": [3000, 4000, 4500, "cuatro mil", 5000, 4000],
    "Cargo": ["Analista", "Gerente", "Desarrollador", "Gerente", "Analista", None],
    "FechaIngreso": [
        "2021-01-15",
        "2020/03/12",
        "2022-07-01",
        "2021/12/01",
        None,
        "2020-03-12",
    ],
}

df = pd.DataFrame(data)

# 1. Identificar y contar valores faltantes en cada columna
missing_values = df.isnull().sum()

# Resultados
print("1. Valores faltantes por columna:\n", missing_values)


CAMBIAR SALARIO EN LETRA POR NUMERO

import pandas as pd
import numpy as np

# Crear el DataFrame con los datos proporcionados
data = {
    "Nombre": ["Juan", "Ana", "Pedro", "María", "Luis", "Carla"],
    "Edad": [28, None, 40, 45, 38, 34],
    "Salario": [3000, 4000, 4500, "cuatro mil", 5000, 4000],
    "Cargo": ["Analista", "Gerente", "Desarrollador", "Gerente", "Analista", None],
    "FechaIngreso": [
        "2021-01-15",
        "2020/03/12",
        "2022-07-01",
        "2021/12/01",
        None,
        "2020-03-12",
    ],
}

df = pd.DataFrame(data)

# 1. Reemplazar "cuatro mil" por 4000 en la columna "Salario"
df["Salario"] = df["Salario"].replace("cuatro mil", 4000)

# 2. Verificar que los valores en "Salario" sean numéricos
def validate_salary(value):
    try:
        return float(value)  # Intentar convertir el valor a número
    except (ValueError, TypeError):  # Asegurarse de cubrir ambos errores
        return np.nan  # Si falla, es un dato no válido

df["Salario"] = df["Salario"].apply(validate_salary)

# Mostrar el DataFrame modificado
print(df)



ESTANDARIZAR FECHAS 

import pandas as pd
import numpy as np

# Crear el DataFrame con los datos proporcionados
data = {
    "Nombre": ["Juan", "Ana", "Pedro", "María", "Luis", "Carla"],
    "Edad": [28, None, 40, 45, 38, 34],
    "Salario": [3000, 4000, 4500, 4000, 5000, 4000],
    "Cargo": ["Analista", "Gerente", "Desarrollador", "Gerente", "Analista", None],
    "FechaIngreso": [
        "2021-01-15",
        "2020/03/12",
        "2022-07-01",
        "2021/12/01",
        None,
        "2020-03-12",
    ],
}

df = pd.DataFrame(data)

# Validar y estandarizar el formato de "FechaIngreso" a YYYY-MM-DD
def validate_date(value):
    try:
        if pd.isnull(value):  # Si el valor es nulo, devolvemos NaN
            return np.nan
        # Convertir el valor a formato de fecha estándar
        return pd.to_datetime(value, errors="coerce").strftime("%Y-%m-%d")
    except (ValueError, TypeError):  # Manejo de errores
        return np.nan

df["FechaIngreso"] = df["FechaIngreso"].apply(validate_date)

# Mostrar el DataFrame modificado
print(df)


VERIFICAR FALTANTES

import pandas as pd
import numpy as np

# Crear el DataFrame con los datos proporcionados
data = {
    "Nombre": ["Juan", "Ana", "Pedro", "María", "Luis", "Carla"],
    "Edad": [28, None, 40, 45, 38, 34],
    "Salario": [3000, 4000, 4500, 4000, 5000, 4000],
    "Cargo": ["Analista", "Gerente", "Desarrollador", "Gerente", "Analista", None],
    "FechaIngreso": [
        "2021-01-15",
        "2020-03-12",
        "2022-07-01",
        "2021-12-01",
        None,
        "2020-03-12",
    ],
}

df = pd.DataFrame(data)


# 4. Verificar que no haya valores faltantes en "Cargo"
cargo_missing = df["Cargo"].isnull().sum()

# Resultados

print("Cantidad de valores faltantes en 'Cargo':", cargo_missing)

print (df)



------------------------------PARTE 2--------------------------------------------

CALCULAR DATOS INVALIDOS

import pandas as pd


# Crear el DataFrame con los datos proporcionados
data = {
    "Productos": ["Producto A", "Producto B", "Producto C", "Producto D"],
    "Precio": [150, -25, 100, None],}  #Precio Negativo y valor faltante
df = pd.DataFrame(data)

df["Validacion Precio"]= df ["Precio"]. apply(lambda x: "Valido" if pd.notnull(x) and x >= 0 else "Invalido")

df_invaludis = df[df["Validacion Precio"] == "Invalido"] 

display(df_invaludis)


VERFICAR DUPLICADOS

import pandas as pd


# Crear el DataFrame con los datos proporcionados
clientes = {
    "ID_Cliente": [1, 2, 3, 2, 4],
    "Nombre": ["Ana", "Luis", "Maria", "Luis", "Carlos",],}
df_clientes = pd.DataFrame(clientes)
duplicados = df_clientes[df_clientes.duplicated(subset="Nombre", keep=False)]
def display_dataframe_to_user(name, dataframe):
    print(f"DataFrame {name}:")
    display(dataframe)

display_dataframe_to_user(name="Clientes Duplicados", dataframe=duplicados)



ENCRIPTAR/DESENCRIPTAR

from cryptography.fernet import Fernet

# Generar clave de encriptación
key = Fernet.generate_key()
cipher_suite = Fernet(key)

# Datos a encriptar
datos_sensibles = "1582-7890-5431-5543".encode()

# Encriptar los datos
datos_encriptados = cipher_suite.encrypt(datos_sensibles)

# Desencriptar los datos
datos_desencriptados = cipher_suite.decrypt(datos_encriptados).decode()

# Resultado
resultado_encriptacion = {
    "datos_encriptados": datos_encriptados,
    "datos_desencriptados": datos_desencriptados
}

resultado_encriptacion



